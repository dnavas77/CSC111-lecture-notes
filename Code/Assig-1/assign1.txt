/***
 * Rutgers University - New Brunswick. Spring 2015.
 *
 * Assignment 1 for CSC-111
 * Completed: Feb 21, 2015.
 * Student: Danilo Navas
 * Professor: Andrew Tjang
-------------------------------------------

Program name: Sum.java
Description: ask user for 2 integer values and prints the sum of them.

Input: integer values.
Output: sum of integer values provided by user.

Possible errors:
	Good data: user enters valid data (i.e.: positive or negative integer numbers).
	Bad data: user enters letters or symbols.
	Boundary conditions: user enters zero for all entries.

Test cases:
	Case 1:
		Input: 2 and 3.
		Expected Output: 5
		Output: 5
	Case 2:
		Input: a and b
		Expected Output: prompt user to enter a valid number
		Output: prompt user to enter valid number
	Case 3:
		Input: 0 and 0
		Expected Output: 0
		Output: 0

-----------------------------------------
Program name: Poly.java
Description: ask user for 3 integer values to calculate polynomial of third degree.

Input: integer values.
Output: canonical form of third degree polynomial.

Possible errors:
	Good data: user enters valid data (i.e.: positive or negativ einteger numbers).
	Bad data: user enters letters or symbols.
	Boundary conditions: user enters zero for all entries.

Test cases:
	Case 1:
		Input: 5, -3, 2
		Expected Output: x^3 - 4x^2 - 11x + 30
		Output: x^3 - 4x^2 - 11x + 30
	Case 2:
		Input: 0, 0, 0.
		Expected Output: x^3 + 0x^2 + 0x + 0
		Output: x^3 + 0x^2 + 0x + 0
	Case 3:
		Input: 1, 1, 1
		Expected Output: x^3 - 3x^2 + 3x - 1
		Output: x^3 - 3x^2 + 3x - 1

-----------------------------------------
Program name: Intersect.java
Description: ask user for 5 double values, 3 for square polynomial and 2 for lineal polynomial.
				 Calculate intersection points between line and parabole and print what the points are
				 or print "none" if no points are found.

Input: double values.
Output: ordered pair of points of intersection, if any.

Possible errors:
	good data: user enters valid numbers for all entries.
	bad data: user enters symbols or letters.
	boundary conditions: user enters all zeroes

Test cases:
	Case 1:
		Input: 5, -3, 2, 1, 3.
		Expected Output:
				The intersection(s) is/are:
				(1.0, 4.0)
				(-0.2, 2.8)
		Output:
				The intersection(s) is/are:
				(1.0, 4.0)
				(-0.2, 2.8)
	Case 2:
		Input: 0, 0, 0, 0, 0.
		Exptected Output:
				The intersection(s) is/are:
				None
		Output:
				The intersection(s) is/are:
				None
	Case 3:
		Input: 0, 0, 1, 0, 0.
		Expected Output:
				The intersection(s) is/are:
				None
		Output:
				The intersection(s) is/are:
				None

-----------------------------------------